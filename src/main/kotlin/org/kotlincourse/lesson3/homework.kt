package org.sergei.org.kotlincourse.lesson3

// Название хакотона
val event : String = "Будущее за QA"

//Дата проведения
var date: String = "15-09-2024"

// Место проведения

val venue: String = "Онлайн"

//Подробный бюджет мероприятия, включая расходы на оборудование, кейтеринг и другие операционные расходы.

private val budget: String = "бюджет мероприятия - 10000, оборудование - 10000, кейтеринг - 50000, прочие расходы - 50000. "

//Количество участников
var people: Int = 0
    get() = field
    private set(value){field = value}

//Длительность хакатона
var days: Long  = 8*60*60

//Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг.
private var contract: String = ""

//Текущее состояние хакатона (статус)
val status: String = "Не начат"

//Список спонсоров
var list_sponsors: String = ""

//Бюджет мероприятия
val event_budget: Int = 200000

//Текущий уровень доступа к интернету
var internet: Int = 10

//Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки.
val info: String by lazy { ""
}

//Количество команд
val number_of_teams: Int = 0

//Перечень задач
val List_of_tasks: String = "Научить студентов, основам Котлина и автоматизации"

//План эвакуации
val evacuation_plan: String = ""

//Список доступного оборудования
val List_of_equipment: String = "Экран, миерофон, наутбук, наушники"

//Список свободного оборудования
var free_equipment: String = "Ноутбук"

//График питания участников (зависит от поставщика питания, определяемого за неделю до начала)
val food: String ="Обед с 12 до 13, и кофе-брейк каждый час"

//План мероприятий на случай сбоев
val disaster_plan: String = "При вне штатной ситуации, всех оповестить рассылкой уведомлений"

//Список экспертов и жюри
val list_of_experts_and_jury: String = "Александр Молокович, Elon Musk"

//Методы и процедуры для сбора отзывов от участников и гостей, включая анонимные опросы и интервью.
val methods_and_feedback: String by lazy { "Опросник вопросов, и книга отзывов" }

//Политика конфиденциальности
val privacy_Policy: String = "Privacy_Policy.com"

//Приватные отзывы (фидбэк) участников и зрителей для анализа проблем.
val private_feedback: String by lazy { "Private_feedback.com/feedback" }

//Текущая температура в помещении
var temperature: Double = 22.5

//Мониторинг и анализ производительности сетевого оборудования и интернет-соединения.
val network_equipment: String = "Специальная программа для мониторинга сети"

//Уровень освещения
var lighting: Int = 3000

//Лог событий мероприятия
var event_log: String = "%SystemRoot%\\System32\\winevt\\Logs"

//Доступность медицинской помощи
val medical: String = "Была куплена автомобильная аптечка"

//Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций.
private val emergency_protocols: String = "Действия согласно плану, закрываем ноут и эвакуируемся"

//Регистрационный номер мероприятия
val event_number = 1

//Максимально допустимый уровень шума в помещении хакатона
val noiselevel: String = "55 дБА с 7.00 до 23.00 и 45 дБА с 23.00 до 7.00"

//Индикатор превышения уровня шума в помещениях
val soundlevelmeter: Boolean  = true

//Формат мероприятия (зависит от геополитической обстановки)
var eventFormat: Boolean = true
    get () = field
    set (value) {
        if (field) field = false
    }

//Количество свободных мест для отдыха (например, кресел или диванов), сеттер валидирует, чтобы количество не было меньше нуля.
var freeSeats: Int = 100
    get() = field
    set(value) {
        if (value < 100) field -= value
    }

//План взаимодействия с прессой
val press_plan: String = "Многозначительно молчим, и умно киваем головой"

//Детальная информация о проектах каждой команды, сбор данных включает в себя компиляцию кода и сбор статистики прогона автоматизированных проверок.
val project_information: String = ""

//Статус получения всех необходимых разрешений
var permissionStatus: Boolean = true
    get () = field
    set (value) {
        if (field == true) field = false
    }
//Указывает, открыт ли доступ к эксклюзивным ресурсам (например, специальному оборудованию)
var exclusive_resources: Boolean = true
    get () = field
    set (value) {
        if (field == true) field = false
    }

//Список партнеров мероприятия
var partners_events: String = ""

//Отчет, включающий фотографии, видео и отзывы, генерируется и становится доступен после завершения мероприятия.
val report: String = ""

//План распределения призов
val distribution_plan: String = "Лучшему - первое место"

//Контактная информация экстренных служб, медицинского персонала и других важных служб, недоступная участникам
val emergency_services: String ="112 - телефон экстренных служб"

//Особые условия для участников с ограниченными возможностями
val special_conditions: String ="Сщздать комфортную среду для людей с ограниченнымми возможностями"

//Общее настроение участников (определяется опросами)
val survey: String by lazy {""}

//Подробный план хакатона, включающий время и содержание каждого сегмента, инициализируется непосредственно перед началом мероприятия.м
var  detailed_plan: String = ""

//Имя знаменитого специального гостя, которое будет объявлено за день до мероприятия.
val nameSpesl: String = "Павел Дуров"

//Максимальное количество людей, которое может вместить место проведения.
const val  max_people= 100

//Стандартное количество часов, отведенное каждой команде для работы над проектом.
val tame: Double = 15.00
