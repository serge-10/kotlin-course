package org.sergei.org.kotlincourse.Lesson23.Homework

//Задача 1

// Напишите функцию analyzeDataType, принимающую параметр типа Any.
// Функция должна определить тип аргумента и вывести соответствующее сообщение:
// Для строки: "Это строка: [значение]".
// Для целого числа: "Это целое число: [значение]".
// Для списка: "Это список, количество элементов: [количество]".
// Для карты: "Это карта, количество пар: [количество]".
// Для остальных типов: "Неизвестный тип данных".
// Используйте оператор is для проверки типов.

fun analyzeDataType(type: Any?){
    when (type){
        is String -> println("Это строка: $type")
        is Int -> println("Это целое число: $type")
        is List< * > -> println("Это список, количество элементов: $type")
        is Map< *, * > -> println("Это карта, количество пар: $type")
        else -> println("Неизвестный тип данных")
    }

}

// Задача 2

// Создайте функцию safeCastToList, принимающую параметр типа Any
// и возвращающую размер списка, если аргумент можно безопасно привести к типу List.
// В случае неудачного приведения функция должна возвращать -1.
// Используйте as? для безопасного приведения типа.

fun safeCastToList(parameter: Any?): Int {
    return (parameter as? List<*>)?.size ?: -1
}

// Задача 3

// Создайте функцию getStringLengthOrZero, которая принимает параметр типа Any?
// и возвращает длину строки, если аргумент можно привести к типу String.
// В случае, если аргумент равен null или не является строкой,
// функция должна возвращать 0.

fun getStringLengthOrZero(parametr1 : Any?): Int{
    return (parametr1 as? String)?.length?: 0
}

// Задача 4

// Создайте функцию, которая принимает параметр типа Any.
// Функция гарантированно ожидает число (в виде числа или строки,
// например 4 или 4.2 или “4.2”) и должна вернуть квадрат этого числа.
// Если придёт число, его нужно возвести в квадрат, если придёт строка,
// то его нужно преобразовать в число через функцию toDouble() и возвести в квадрат.

fun squareNumber(parameter: Any): Double? {
    return when (parameter) {
        is Number -> parameter.toDouble() * parameter.toDouble() // Если это число
        is String -> {
            val number = parameter.toDoubleOrNull()         // Преобразуем строку в число
            if (number != null) number * number else null   // Проверяем результат
        }
        else -> null // Для всех остальных типов возвращаем null
    }
}

// Задача 5

// Напишите функцию sumIntOrDoubleValues, которая принимает список элементов типа Any
// и возвращает сумму всех целочисленных (Int) и вещественных (Double) значений в списке.
// Все остальные типы должны быть проигнорированы.

fun sumIntOrDoubleValues(list: List<Any?>): Double {
    var summ = 0.0
    for (i in list) {
        if (i is Int || i is Double) {
            summ += i.toString().toDouble() // Приводим к Double
        }
    }
    return summ
}

// Задача 6

// Создайте функцию tryCastToListAndPrint, которая принимает параметр типа Any
// и пытается привести его к типу List<*>. Если приведение успешно,
// функция должна напечатать все строки из списка, если элемент не является строкой
// то вывести предупреждение об этом.
// Если приведение неудачно, должно быть выведено сообщение об ошибке,
// не прерывая выполнение программы.

fun tryCastToListAndPrint(parameter3: Any?){
    val list = parameter3 as? List<*>

    if (list != null) {
        for (item in list) {
            if (item is String) {
                println(item)
            } else {
                println("$item не является строкой.")
            }
        }
    } else {
        println("$parameter3 не является списком.")
    }
}